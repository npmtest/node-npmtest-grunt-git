{"/home/travis/build/npmtest/node-npmtest-grunt-git/test.js":"/* istanbul instrument in package npmtest_grunt_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-git/lib.npmtest_grunt_git.js":"/* istanbul instrument in package npmtest_grunt_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_git = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_git = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-git/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-git && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_git\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_git.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_git.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_git.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_git.__dirname + '/lib.npmtest_grunt_git.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/Gruntfile.js":"/*\n * grunt-git\n * https://github.com/rubenv/grunt-git\n *\n * Copyright (c) 2013 Ruben Vermeersch\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt) {\n\n    // Project configuration.\n    grunt.initConfig({\n        watch: {\n            dev: {\n                files: ['tasks/*.js', 'lib/*.js', 'test/*.js'],\n                tasks: ['jshint', 'test']\n            }\n        },\n\n        jshint: {\n            all: [\n                'Gruntfile.js',\n                'tasks/*.js',\n                'lib/*.js',\n                'test/*.js',\n                'test/fixtures/*.js'\n            ],\n            options: {\n                jshintrc: '.jshintrc',\n            },\n        },\n\n        jscs: {\n            src: {\n                options: {\n                    config: '.jscs.json'\n                },\n                files: {\n                    src: [\n                        'Gruntfile.js',\n                        'tasks/*.js',\n                        'lib/*.js',\n                        'test/*.js',\n                        'test/fixtures/*.js'\n                    ],\n                }\n            },\n        },\n\n        mochacli: {\n            options: {\n                files: 'test/*_test.js'\n            },\n            spec: {\n                options: {\n                    reporter: 'spec',\n                    timeout: 10000\n                }\n            }\n        },\n\n        bump: {\n            options: {\n                files: ['package.json'],\n                commitFiles: ['-a'],\n                pushTo: 'origin'\n            }\n        },\n\n        // Before generating any new files, remove any previously-created files.\n        clean: {\n            tests: ['tmp'],\n        },\n    });\n\n    // Actually load this plugin's task(s).\n    grunt.loadTasks('tasks');\n\n    // These plugins provide necessary tasks.\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-contrib-clean');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-jscs');\n    grunt.loadNpmTasks('grunt-mocha-cli');\n    grunt.loadNpmTasks('grunt-bump');\n\n    // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n    // plugin's task(s), then test the result.\n    grunt.registerTask('test', ['jshint', 'jscs', 'clean', 'mochacli']);\n\n    // By default, lint and run all tests.\n    grunt.registerTask('default', ['test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_add.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'all',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'force',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        }\n    ]);\n\n    var options = argUtil.options;\n    var args = ['add'].concat(argUtil.getArgFlags());\n\n    task.files.forEach(function (files) {\n        for (var i = 0; i < files.src.length; i++) {\n            args.push(files.src[i]);\n        }\n    });\n\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Add file contents to the index.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_apply.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var options = task.options({\n        prop: 'gitapply.' + task.target + '.result'\n    });\n\n    var argUtil = new ArgUtil(task, [\n            {\n                option: 'stat',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--stat'\n            },\n            {\n                option: 'numstat',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--numstat'\n            },\n            {\n                option: 'summary',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--summary'\n            },\n            {\n                option: 'check',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--check'\n            },\n            {\n                option: 'index',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--index'\n            },\n            {\n                option: 'cached',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--cached'\n            },\n            {\n                option: 'threeway',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '-3'\n            },\n            {\n                option: 'recount',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--recount'\n            },\n            {\n                option: 'reject',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--reject'\n            },\n            {\n                option: 'reverse',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--reverse'\n            },\n            {\n                option: 'numStatKeepPathNames',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '-z'\n            },\n            {\n                option: 'removeLeadingSlashes',\n                defaultValue: null,\n                useAsFlag: true,\n                useValue: true,\n                flag: '-p'\n            },\n            {\n                option: 'ensureContextMatch',\n                defaultValue: null,\n                useAsFlag: true,\n                useValue: true,\n                flag: '-C'\n            },\n            {\n                option: 'unidiffZero',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--unidiff-zero'\n            },\n            {\n                option: 'noAdd',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--no-add'\n            },\n            {\n                option: 'exclude',\n                defaultValue: null,\n                useAsFlag: true,\n                useValue: true,\n                flag: '--exclude'\n            },\n            {\n                option: 'include',\n                defaultValue: null,\n                useAsFlag: true,\n                useValue: true,\n                flag: '--include'\n            },\n            {\n                option: 'ignoreSpaceChange',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--ignore-space-change'\n            },\n            {\n                option: 'ignoreWhitespace',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--ignore-whitespace'\n            },\n            {\n                option: 'inaccurateEOF',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--inaccurate-eof'\n            },\n            {\n                option: 'whitespace',\n                defaultValue: null,\n                useAsFlag: true,\n                useValue: true,\n                flag: '--whitespace'\n            },\n            {\n                option: 'directory',\n                defaultValue: null,\n                useAsFlag: true,\n                useValue: true,\n                flag: '--directory'\n            },\n            {\n                option: 'unsafePaths',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--unsafe-paths'\n            },\n            {\n                option: 'apply',\n                defaultValue: false,\n                useAsFlag: true,\n                useValue: false,\n                flag: '--apply'\n            },\n            {\n                option: 'patchFiles',\n                defaultValue: null,\n                useAsFlag: false,\n                useValue: true\n            }\n    ]);\n\n    var args = ['apply'].concat(argUtil.getArgFlags());\n\n    function handleResult(err, result) {\n        var logs;\n\n        if (err) {\n            grunt.fail.fatal('Error running git apply');\n            return;\n        }\n\n        if (typeof options.callback === 'function') {\n            options.callback(result.stdout);\n        }\n        done();\n    }\n\n    args.push(handleResult);\n\n    exec.apply(null, args);\n};\n\nmodule.exports.description = 'Apply a git patch to your cwd.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_checkout.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'create',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-b'\n        },\n        {\n            option: 'overwrite',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-B'\n        },\n        {\n            option: 'branch',\n            defaultValue: undefined,\n            useAsFlag: false,\n            useValue: true,\n            required: true\n        },\n        {\n            option: 'force',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-f'\n        }\n    ]);\n\n    var args = ['checkout'].concat(argUtil.getArgFlags());\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Checkout a git branch.';\n\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_clean.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'force',\n            defaultValue: true,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-f'\n        },\n        {\n            option: 'dry',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-n'\n        },\n        {\n            option: 'quiet',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-q'\n        },\n        {\n            option: 'exclude',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: true,\n            flag: '-e'\n        },\n        {\n            option: 'onlyignoredfiles',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-X'\n        },\n        {\n            option: 'nonstandard',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-x'\n        },\n        {\n            option: 'directories',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-d'\n        },\n    ]);\n\n    var args = ['clean'].concat(argUtil.getArgFlags());\n\n    // Add the file paths to the arguments.\n    task.files.forEach(function (files) {\n        for (var i = 0; i < files.src.length; i++) {\n            args.push(files.src[i]);\n        }\n    });\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Remove untracked files from the working tree.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_clone.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'bare',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'recursive',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'branch',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: true\n        },\n        {\n            option: 'depth',\n            defaultValue: null,\n            useAsFlag: true,\n            useValue: true\n        },\n        {\n            option: 'repository',\n            defaultValue: null,\n            useAsFlag: false,\n            useValue: true,\n            required: true\n        },\n        {\n            option: 'directory',\n            defaultValue: null,\n            useAsFlag: false,\n            useValue: true\n        }\n    ]);\n\n    var args = ['clone'].concat(argUtil.getArgFlags());\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Clone repositories.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_commit.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'message',\n            defaultValue: 'Commit',\n            useAsFlag: true,\n            useValue: true,\n            flag: '-m'\n        },\n        {\n            option: 'description',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: true,\n            flag: '-m'\n        },\n        {\n            option: 'allowEmpty',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'noVerify',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'noStatus',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        }\n    ]);\n\n    var options = argUtil.options;\n    var args = ['commit'].concat(argUtil.getArgFlags());\n\n    task.files.forEach(function (files) {\n        for (var i = 0; i < files.src.length; i++) {\n            args.push(files.src[i]);\n        }\n    });\n\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Commit a git repository.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_diff.js":"'use strict';\n\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'exitCode',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '--exit-code'\n        },\n        {\n            option: 'cached',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '--cached'\n        }\n    ]);\n\n    var args = ['diff'].concat(argUtil.getArgFlags());\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Run a git diff.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_fetch.js":"'use strict';\n\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'repository',\n            defaultValue: null,\n            useAsFlag: false,\n            useValue: true\n        },\n        {\n            option: 'all'\n        },\n        {\n            option: 'append'\n        },\n        {\n            option: 'prune'\n        },\n        {\n            option: 'notags',\n            flag: '--no-tags'\n        },\n        {\n            option: 'tags'\n        }\n    ]);\n\n    var args = ['fetch'].concat(argUtil.getArgFlags());\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Download objects and refs from a repo.';\n\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_merge.js":"'use strict';\n\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'branch',\n            defaultValue: null,\n            useAsFlag: false,\n            useValue: true,\n            required: true\n        },\n        {\n            option: 'ffOnly',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'squash',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'noff',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '--no-ff'\n        },\n        {\n            option: 'edit',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'noEdit',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'message',\n            defaultValue: null,\n            useAsFlag: true,\n            useValue: true,\n            flag: '-m'\n        },\n        {\n            option: 'commit',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'noCommit',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'strategy',\n            defaultValue: null,\n            useAsFlag: true,\n            useValue: true,\n            flag: '-s'\n        },\n        {\n            option: 'strategyOption',\n            defaultValue: null,\n            useValue: true,\n            useAsFlag: false,\n            customValueFn: function (arg) {\n                if (arg.value) {\n                    return '-X' + arg.value;\n                }\n                return null;\n            }\n        }\n    ]);\n\n    var args = ['merge'].concat(argUtil.getArgFlags());\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Merge a git branch.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_pull.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'remote',\n            defaultValue: 'origin',\n            useAsFlag: false,\n            useValue: true\n        },\n        {\n            option: 'branch',\n            defaultValue: null,\n            useAsFlag: false,\n            useValue: true\n        }\n    ]);\n\n\n    var args = ['pull'].concat(argUtil.getArgFlags());\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Pull a remote.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_push.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'all',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'upstream',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '--set-upstream'\n        },\n        {\n            option: 'tags',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'force',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'remote',\n            defaultValue: 'origin',\n            useAsFlag: false,\n            useValue: true\n        },\n        {\n            option: 'branch',\n            defaultValue: null,\n            useAsFlag: false,\n            useValue: true\n        }\n    ]);\n\n    var args = ['push'].concat(argUtil.getArgFlags());\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Pushes to a remote.';\n\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_rebase.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'theirs',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            customFlagFn: function (arg) {\n                if (arg.value) {\n                    return ['--strategy=recursive', '-Xtheirs'];\n                }\n                return null;\n            }\n        },\n        {\n            option: 'branch',\n            defaultValue: null,\n            useAsFlag: false,\n            useValue: true,\n            required: true\n        }\n    ]);\n\n    var args = ['rebase'].concat(argUtil.getArgFlags());\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Rebase a branch onto another branch.';\n\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_reset.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'mode',\n            defaultValue: false,\n            useAsFlag: false,\n            useValue: true,\n            customValueFn: function (arg) {\n                if (arg.value) {\n                    return ['--' + arg.value];\n                }\n                return null;\n            }\n        },\n        {\n            option: 'commit',\n            defaultValue: 'HEAD',\n            useAsFlag: false,\n            useValue: true\n        }\n    ]);\n\n    var options = argUtil.options;\n    var args = ['reset'].concat(argUtil.getArgFlags());\n\n    if (!options.mode) {\n        task.files.forEach(function (files) {\n            for (var i = 0; i < files.src.length; i++) {\n                args.push(files.src[i]);\n            }\n        });\n    }\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Reset changes.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_revParse.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var options = task.options({\n        prop: 'gitrevParse.' + task.target + '.result'\n    });\n\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'short',\n            useAsFlag: true,\n            useValue: false,\n            customFlagFn: function (arg) {\n                if (arg.value) {\n                    return ['--short=' + arg.value];\n                }\n                return null;\n            }\n        },\n        {\n            option: 'abbrevRef',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            customFlagFn: function (arg) {\n                if (arg.value) {\n                    return ['--abbrev-ref'];\n                }\n                return null;\n            }\n        },\n        {\n            option: 'treeIsh',\n            defaultValue: 'head',\n            useAsFlag: false,\n            useValue: true\n        }\n    ]);\n\n    function next(error, result, code) {\n        result = result.toString();\n\n        if (options.prop) {\n            grunt.config.set(options.prop, result);\n        }\n\n        if (typeof options.callback === 'function') {\n            options.callback(result);\n        }\n\n        done();\n    }\n\n    var args = ['rev-parse'].concat(argUtil.getArgFlags());\n\n    args.push(next);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Pick out and massage parameters';","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_rm.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'force',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-f'\n        },\n        {\n            option: 'recurse',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-r'\n        }\n    ]);\n\n    var options = argUtil.options;\n    var args = ['rm'].concat(argUtil.getArgFlags());\n\n    task.files.forEach(function (files) {\n        for (var i = 0; i < files.src.length; i++) {\n            args.push(files.src[i]);\n        }\n    });\n\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Remove files from the working tree and the index.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/commands.js":"module.exports = {\n    add: require('./command_add'),\n    archive: require('./command_archive'),\n    checkout: require('./command_checkout'),\n    clean: require('./command_clean'),\n    clone: require('./command_clone'),\n    commit: require('./command_commit'),\n    fetch: require('./command_fetch'),\n    log: require('./command_log'),\n    merge: require('./command_merge'),\n    pull: require('./command_pull'),\n    push: require('./command_push'),\n    rebase: require('./command_rebase'),\n    reset: require('./command_reset'),\n    revParse: require('./command_revParse'),\n    rm: require('./command_rm'),\n    stash: require('./command_stash'),\n    tag: require('./command_tag'),\n    diff: require('./command_diff'),\n    apply: require('./command_apply')\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_archive.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            // --format=<fmt>\n            // Format of the resulting archive: tar or zip. If this option is not given, and the output file is specified, the format is inferred from the filename if possible (e.g. writing to \"foo.zip\" makes the output to be in the zip format). Otherwise the output format is tar.\n            option: 'format',\n            defaultValue: null,\n            useAsFlag: true,\n            useValue: true\n        },\n        {\n            // --prefix=<prefix>/\n            // Prepend <prefix>/ to each filename in the archive.\n            option: 'prefix',\n            defaultValue: null,\n            useAsFlag: true,\n            useValue: true\n        },\n        {\n            // --output=<file>\n            // Write the archive to <file> instead of stdout.\n            option: 'output',\n            defaultValue: null,\n            useAsFlag: true,\n            useValue: true\n        },\n        {\n            // --remote=<repo>\n            // Instead of making a tar archive from the local repository, retrieve a tar archive from a remote repository.\n            // Note: It seems that GitHub does not support the remote archiving feature.\n            option: 'remote',\n            defaultValue: null,\n            useAsFlag: true,\n            useValue: true\n        },\n        {\n            // <tree-ish>\n            // The tree or commit to produce an archive for.\n            option: 'treeIsh',\n            defaultValue: 'master',\n            useAsFlag: false,\n            useValue: true,\n            required: true\n        },\n        {\n            // <path>\n            // Without an optional path parameter, all files and subdirectories of the current working directory are included in the archive. If one or more paths are specified, only these are included.\n            option: 'path',\n            defaultValue: null,\n            useAsFlag: false,\n            useValue: true,\n            customValueFn: function (arg) {\n                if (arg.value) {\n                    if (grunt.util.kindOf(arg.value) === 'string') {\n                        // Backwards compatible to <= 0.2.8.\n                        arg.value = [arg.value];\n                    }\n                    return arg.value;\n                }\n                return null;\n            }\n        }\n    ]);\n    var options = task.options({\n        treeIsh: 'master'\n    });\n\n    var args = ['archive'].concat(argUtil.getArgFlags());\n    // git archive --format=<format> --prefix=<base_directory>/ treeIsh --output=<output file>\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Create a git archive.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_log.js":"'use strict';\n\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nvar SEPARATOR = '--grunt-gitlog-separator--';\nvar FORMAT =\n    '{%n' +\n    '  \"hash\": \"%H\",%n' + // commit hash\n    '  \"author\": {%n' +\n    '    \"name\": \"%an\",%n' + // author\n    '    \"email\": \"%ae\"%n' + // email\n    '  },%n' +\n    '  \"date\": \"%aD\",%n' + // date\n    '  \"subject\": \"%s\",%n' + // subject\n    '  \"body\": \"%b\"%n' + // body\n    '}%n' +\n    SEPARATOR; // separator\n\nfunction parseLog(log) {\n    try {\n        return JSON.parse(log);\n    } catch (e) {\n        grunt.fail.warn('Log failed to match exepected pattern:\\n' + log);\n        return {};\n    }\n}\n\nfunction parseLogs(str) {\n    var logs = str.split(SEPARATOR);\n    return logs.slice(0, -1).map(parseLog);\n}\n\nfunction argToISOString(arg) {\n    return !!arg.value ? new Date(arg.value).toISOString() : null;\n}\n\nmodule.exports = function (task, exec, done) {\n    var options = task.options({\n        prop: 'gitlog.' + task.target + '.result'\n    });\n\n    var argConfigs = [\n        {\n            option: 'pretty',\n            useAsFlag: false,\n            useValue: true,\n            defaultValue: 'format:' + FORMAT,\n            customValueFn: function (arg) {\n                if (arg.value) {\n                    return '--' + arg.option + '=' + arg.value;\n                }\n                return null;\n            }\n        },\n        {\n            option: 'noWalk',\n            useAsFlag: true,\n            defaultValue: false,\n            useValue: false\n        },\n        {\n            option: 'tags',\n            useAsFlag: true,\n            defaultValue: false,\n            useValue: false\n        },\n        {\n            option: 'noMerges',\n            useAsFlag: true,\n            defaultValue: true,\n            useValue: false\n        },\n        {\n            option: 'number',\n            flag: '-n',\n            useAsFlag: true,\n            useValue: true\n        },\n        {\n            option: 'before',\n            useAsFlag: true,\n            defaultValue: false,\n            customValueFn: argToISOString\n        },\n        {\n            option: 'after',\n            useAsFlag: true,\n            defaultValue: false,\n            customValueFn: argToISOString\n        },\n        {\n            option: 'from',\n            useAsFlag: false,\n            customValueFn: function (arg) {\n                if (arg.value) {\n                    return arg.value + '..' + (options.to || 'HEAD');\n                } else {\n                    return null;\n                }\n            }\n        },\n        {\n            option: 'dateOrder',\n            useAsFlag: true,\n            useValue: false,\n            defaultValue: false,\n            customFlagFn: function (arg) {\n                if (arg.value || options.before || options.after) {\n                    return '--date-order';\n                }\n                return null;\n            }\n        }\n    ];\n\n    var argUtil = new ArgUtil(task, argConfigs);\n\n    function handleResult(err, result) {\n        var logs;\n\n        if (err) {\n            grunt.fail.fatal('Error running git log');\n            return;\n        }\n\n        logs = parseLogs(result.stdout);\n\n        if (options.prop) {\n            grunt.config.set(options.prop, logs);\n        }\n\n        if (typeof options.callback === 'function') {\n            options.callback(logs);\n        }\n        done();\n    }\n\n    var args = ['log'].concat(argUtil.getArgFlags());\n    args.push(handleResult);\n    exec.apply(null, args);\n};\n\nmodule.exports.description = 'Read commit logs from a git repository.';\n\n// exposed for tests\nmodule.exports.format = FORMAT;\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_stash.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'command',\n            defaultValue: 'save',\n            useAsFlag: false,\n            useValue: true\n        },\n        {\n            option: 'stash',\n            defaultValue: null,\n            useAsFlag: false,\n            useValue: true,\n            customValueFn: function (arg) {\n                if (arg.value) {\n                    return ['stash@{' + arg.value + '}'];\n                }\n                return null;\n            }\n        },\n        {\n            option: 'staged',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '--index'\n        }\n    ]);\n\n    var args = ['stash'].concat(argUtil.getArgFlags());\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Stash and apply code changes.';\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/lib/command_tag.js":"'use strict';\n\nvar async = require('grunt').util.async;\nvar grunt = require('grunt');\nvar ArgUtil = require('flopmang');\n\nmodule.exports = function (task, exec, done) {\n    var argUtil = new ArgUtil(task, [\n        {\n            option: 'remove',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-d'\n        },\n        {\n            option: 'message',\n            defaultValue: '',\n            useAsFlag: true,\n            useValue: true,\n            flag: '-m'\n        },\n        {\n            option: 'annotated',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false,\n            flag: '-a'\n        },\n        {\n            option: 'force',\n            defaultValue: false,\n            useAsFlag: true,\n            useValue: false\n        },\n        {\n            option: 'tag',\n            defaultValue: null,\n            useAsFlag: false,\n            useValue: true,\n            required: true\n        }\n    ]);\n\n    var args = ['tag'].concat(argUtil.getArgFlags());\n\n    // Add callback\n    args.push(done);\n\n    exec.apply(this, args);\n};\n\nmodule.exports.description = 'Create a git tag.';\n\n","/home/travis/build/npmtest/node-npmtest-grunt-git/node_modules/grunt-git/tasks/git.js":"/*\n * grunt-git\n * https://github.com/rubenv/grunt-git\n *\n * Copyright (c) 2013 Ruben Vermeersch\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar commands = require('../lib/commands');\n\nmodule.exports = function (grunt) {\n\n    function wrapCommand(fn) {\n        return function () {\n            var self = this;\n\n            function exec() {\n                var args = Array.prototype.slice.call(arguments);\n                var callback = args.pop();\n                var options = self.options({\n                    verbose: false\n                });\n                var spawnOpts = {};\n\n                //build spawn options based on task options\n                if (options.cwd) {\n                    //verify that the specified cwd exists\n                    if (grunt.file.isDir(options.cwd)) {\n                        spawnOpts.cwd = options.cwd;\n                    } else {\n                        throw new Error('The specified cwd does not exist: \"' + options.cwd  + '\"');\n                    }\n                }\n                if (options.verbose) { spawnOpts.stdio = 'inherit'; }\n\n                grunt.util.spawn({\n                    cmd: 'git',\n                    args: args,\n                    opts: spawnOpts\n                }, function () {\n                    callback.apply(this, arguments);\n                });\n            }\n\n            var done = self.async();\n            fn(self, exec, done);\n        };\n    }\n\n    for (var command in commands) {\n        var fn = commands[command];\n        grunt.registerMultiTask('git' + command, fn.description || '', wrapCommand(fn));\n    }\n};\n"}